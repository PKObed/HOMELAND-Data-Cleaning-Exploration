--DISPLAY DATA BEING USED
SELECT *
FROM [PRODUCT PURCHASE];
SELECT *
FROM [PRICE LIST];
SELECT *
FROM [PACKING & AVAILABILITY];

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------

--UPDATING TABLES 
/*QTY IN [PRODUCT PURCHASE] TABLE is 2000 for all products, due to a formula error in excel that was not corrected before import*/
--making the correction....
UPDATE [PRODUCT PURCHASE]
SET [PURCHASE QTY] = (SELECT
CASE
     WHEN CAST([CC STOCK] AS INT) + CAST([HO SH STOCK] AS INT) + CAST([HO WH STOCK] AS INT) = 0 THEN 2400
	 WHEN CAST([CC STOCK] AS INT) + CAST([HO SH STOCK] AS INT) + CAST([HO WH STOCK] AS INT) <= 1200 THEN 2600
	 WHEN CAST([CC STOCK] AS INT) + CAST([HO SH STOCK] AS INT) + CAST([HO WH STOCK] AS INT) <= 3000 THEN 3200
	 WHEN CAST([CC STOCK] AS INT) + CAST([HO SH STOCK] AS INT) + CAST([HO WH STOCK] AS INT) <= 6000 THEN 6000
	 ELSE CAST([CC STOCK] AS INT) + CAST([HO SH STOCK] AS INT) + CAST([HO WH STOCK] AS INT) + 2400
	 END AS TRIAL
	 FROM [PACKING & AVAILABILITY]
	 WHERE [PRODUCT PURCHASE].CODE = [PACKING & AVAILABILITY].CODE)

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------

--ALTERING:

/*Removing all wholesale price categories from the [PRICE LIST] TABLE. 
As this information is not for public and unnecessary to have in this project*/
ALTER TABLE [PRICE LIST]
DROP COLUMN [SH PRICE], [C_G PRICE], A, B, C

--Removing the actual landing cost [LANDING COST $] from [PRODUCT PURCHASE] TABLE
ALTER TABLE [PRODUCT PURCHASE]
DROP COLUMN [LANDING COST $]

-- Modifying Table Attributes( renaming, setting prefered data types & constraints)
-- [PACKING & AVAILABILITY] TABLE ; RENAMING COLUMNS :
 EXEC SP_RENAME 'PACKING & AVAILABILITY.QTY#A CC','CC STOCK' ;
 EXEC SP_RENAME 'PACKING & AVAILABILITY.QTY#A HO SH','HO SH STOCK' ;
 EXEC SP_RENAME 'PACKING & AVAILABILITY.QTY#A HO SH','HO SH STOCK' ;
--CHANGING COLUMN DATA TYPES :
ALTER TABLE [PACKING & AVAILABILITY]
ALTER COLUMN CODE VARCHAR(20)
ALTER TABLE [PACKING & AVAILABILITY]
ALTER COLUMN [QTY/BOX] NUMERIC
ALTER TABLE [PACKING & AVAILABILITY]
ALTER COLUMN UNIT VARCHAR(3)
-- Purposely did not change DATA TYPE OF STOCK COLUMNS SO AS TO USE CAST LATER ON.

-- [PRICE LIST] TABLE ; RENAMING COLUMNS :
 EXEC SP_RENAME 'PRICE LIST.C#G','C_G PRICE'
 EXEC SP_RENAME 'PRICE LIST.SH/B','SH PRICE'
 --CHANGING COLUMN DATA TYPES :
	ALTER TABLE [PRICE LIST]
 ALTER COLUMN [CODE] VARCHAR(20)
	ALTER TABLE [PRICE LIST]
 ALTER COLUMN [SH PRICE] MONEY
	ALTER TABLE [PRICE LIST]
 ALTER COLUMN [C_G PRICE] MONEY
	ALTER TABLE [PRICE LIST]
 ALTER COLUMN [A] MONEY
	ALTER TABLE [PRICE LIST]
 ALTER COLUMN [B] MONEY
	ALTER TABLE [PRICE LIST]
 ALTER COLUMN [C] MONEY
    ALTER TABLE [PRICE LIST]
 ALTER COLUMN [RETAIL] MONEY

 -- [PRODUCT PURCHASE] TABLE ; CHANGING COLUMN DATA TYPES :
 ALTER TABLE [PRODUCT PURCHASE]
 ALTER COLUMN [CODE] VARCHAR(20)

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------

 -- QUERY TO SHOW THE QTY PURCHASED FOR PRODUCTS THAT ARE OUT OF STOCK

 --To get this result whereever stock is "NOT AVAILABLE" must be set to 0 first
 --Setting "NOT AVAILABLE" to 0
 UPDATE [PACKING & AVAILABILITY]
 SET [CC STOCK] = 0
 WHERE [CC STOCK] = 'NOT AVAILABLE';
  
  UPDATE [PACKING & AVAILABILITY]
 SET [HO SH STOCK] = 0
 WHERE [HO SH STOCK] = 'NOT AVAILABLE';

  UPDATE [PACKING & AVAILABILITY]
 SET [HO WH STOCK] = 0
 WHERE [HO WH STOCK] = 'NOT AVAILABLE';
 
 -- NOW
 SELECT [PACKING & AVAILABILITY].CODE, DESCRIPTION, [PURCHASE QTY], 'OUT OF STOCK' AS AVAILABILITY
 FROM [PACKING & AVAILABILITY]
 JOIN [PRODUCT PURCHASE]
 ON [PACKING & AVAILABILITY].CODE = [PRODUCT PURCHASE].CODE
 WHERE CONVERT(NUMERIC,[CC STOCK]) + CONVERT(NUMERIC,[HO SH STOCK]) + CONVERT(NUMERIC,[HO WH STOCK]) = 0

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------

--QUERY TO SHOW THE QUANTITY SOLD FOR ONLY KITCHENWARE, SHOW HIGHEST SOLD PRODUCT ON TOP :

 /*Because the sold qty = purchased qty - availabe stock, i would first create a temp table joining STOCK from [PACKING & AVILABILITY] 
 and PURCHASE QTY from [PRODUCT PURCHASE], then make a join of this temp table with the [PRICE LIST] table which has the product categories */
 DROP TABLE IF EXISTS #PRODUCTS_SOLD
 CREATE TABLE #PRODUCTS_SOLD(
 PRODUCT_CODE VARCHAR(20),
 [PURCHASED QTY] NUMERIC,
 [AVAILABLE QTY] NUMERIC,
 [SOLD QTY] NUMERIC
 )
 INSERT INTO #PRODUCTS_SOLD 
SELECT [PRODUCT PURCHASE].CODE, [PRODUCT PURCHASE].[PURCHASE QTY],
	   CAST([PACKING & AVAILABILITY].[CC STOCK] AS INT)  + CAST([PACKING & AVAILABILITY].[HO SH STOCK] AS INT)
	   + CAST([PACKING & AVAILABILITY].[HO WH STOCK] AS INT) 
	AS [AVAILABLE QTY],
	   [PRODUCT PURCHASE].[PURCHASE QTY] - (CAST([PACKING & AVAILABILITY].[CC STOCK] AS INT) + CAST([PACKING & AVAILABILITY].[HO SH STOCK] AS INT)
	   + CAST([PACKING & AVAILABILITY].[HO WH STOCK] AS INT))  
	AS [SOLD QTY]
FROM [PRODUCT PURCHASE]
JOIN [PACKING & AVAILABILITY]
ON [PRODUCT PURCHASE].CODE = [PACKING & AVAILABILITY].CODE ;

--NOW kitchenware categories include(CERAMICWARE, COOKWARE, CUTLERY, FLASKS, GLASSWARE, MUGS, PLASTICWARE, TRAYS, UTENSILS)
--but plasticware contains non-kitchenware products hence must be filtered.
--SHOWING QUANTITY SOLD FOR KITCHENWARE PRODUCTS FROM HIGHEST SOLD TO LEAST SOLD :
SELECT Sub.CATEGORIES, Sub.CODE, Sub.DESCRIPTION, #PRODUCTS_SOLD.[SOLD QTY]
FROM  (SELECT*  FROM [PRICE LIST] 
		WHERE CATEGORIES IN ('CERAMICWARE', 'COOKWARE', 'CUTLERY', 'FLASKS', 'GLASSWARE', 'MUGS', 'PLASTICWARE', 'TRAYS', 'UTENSILS') 
		AND  DESCRIPTION NOT LIKE '%bin%' AND DESCRIPTION NOT LIKE '%bath%' AND DESCRIPTION NOT LIKE '%stool%'
		AND DESCRIPTION NOT LIKE '%school%' AND DESCRIPTION NOT LIKE '%cloth%' AND DESCRIPTION NOT LIKE '%soap%' AND DESCRIPTION NOT LIKE '%peg%'
		AND DESCRIPTION NOT LIKE '%tissue%' AND DESCRIPTION NOT LIKE '%wash%') AS Sub
JOIN #PRODUCTS_SOLD
ON #PRODUCTS_SOLD.PRODUCT_CODE = Sub.CODE
ORDER BY #PRODUCTS_SOLD.[SOLD QTY] DESC

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------

-- QUERY TO SHOW HOW MANY PRODUCTS ARE IN EACH CATEGORY AND THE PERCENTAGE HOLDINGS OF EACH CATEGORY
WITH [PRODUCTS QUANTIFIED] AS
( SELECT CODE, CATEGORIES, COUNT(CODE) OVER() AS [ALL PRODUCTS], COUNT(CODE) OVER(PARTITION BY CATEGORIES) AS [PRODUCTS/CATEGORY]
  FROM [PRICE LIST] )
SELECT CATEGORIES, COUNT(CODE) AS [PRODUCTS CONTAINED], 
	   CONVERT(DECIMAL(9,2), MAX(CONVERT(NUMERIC,[PRODUCTS/CATEGORY])/CONVERT(NUMERIC,[ALL PRODUCTS]))*100) AS [PERCENTAGE SHARE OF PRODUCTS]
FROM [PRODUCTS QUANTIFIED]
GROUP BY CATEGORIES
ORDER BY 1, 3

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------

--QUERY TO SHOW THE BEST SELLER IN EACH CATEGORY
WITH [BEST SELLERS] AS 
( SELECT [PRICE LIST].CATEGORIES, [PRICE LIST].CODE, [PRICE LIST].DESCRIPTION, #PRODUCTS_SOLD.[SOLD QTY], 
  ROW_NUMBER() OVER (PARTITION BY [PRICE LIST].CATEGORIES ORDER BY #PRODUCTS_SOLD.[SOLD QTY] DESC) AS R_N
  FROM [PRICE LIST]
JOIN #PRODUCTS_SOLD
  ON [PRICE LIST].CODE = #PRODUCTS_SOLD.PRODUCT_CODE )
SELECT CATEGORIES, CODE, DESCRIPTION, [SOLD QTY]
FROM [BEST SELLERS]
WHERE R_N = 1

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--Show price histogram for all products
SELECT RETAIL, COUNT(*) AS [COUNT OF PRODUCTS]
FROM [PRICE LIST]
WHERE RETAIL IS NOT NULL
GROUP BY RETAIL
ORDER BY 1

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------

--PRICES NEED TO BE CHANGED AND MANAGEMENT NEED TO KNOW WHICH PRODUCTS MUST GET PRICE CUTS AND THOSE THAT NEED AN INCREMENT
--Creating a stored procedure to Show the profit percent for each individual category based on input. 
CREATE PROCEDURE [SHOW_PROFIT%]
@CATEGORY NVARCHAR(255)
AS
SELECT [PRICE LIST].CATEGORIES, [PRICE LIST].CODE, [PRICE LIST].DESCRIPTION, 
	   (([PRICE LIST].RETAIL - [PRODUCT PURCHASE].[LANDING COST GHC])/[PRODUCT PURCHASE].[LANDING COST GHC])*100 AS [PROFIT%]
FROM [PRICE LIST]
JOIN [PRODUCT PURCHASE]
ON [PRICE LIST].CODE = [PRODUCT PURCHASE].CODE
WHERE RETAIL IS NOT NULL AND @CATEGORY = [PRICE LIST].CATEGORIES
ORDER BY CATEGORIES, [PROFIT%] 

--RUNNING THE PROCEDURE TO SHOW PROFIT%
EXEC [SHOW_PROFIT%] @CATEGORY = /*TYPE A CATEGORY INSIDE QOUTES*/'COOKWARE'
